layout (location = 0) in vec3 aPos;


out float dScale;
uniform float pointSizeReal;
uniform float pointSizeMaxRender;
uniform mat4 pvm;
uniform vec2 screenSize;

const float minPointScale = 0.15;

void main()
{
	vec4 Pos = vec4( aPos, 1.0 );
 	
 	//projected vertex position
 	gl_Position = pvm * Pos;
 	
 	//let's shift it to the side 
 	//for some value in the screen coordinates
 	vec4 shift= gl_Position;
 	shift.x=shift.x+100.0;

	//let's go back to original coordinates
	//and see the line in x direction of the screen
 	mat4 invPVM = inverse(pvm);
 	shift=invPVM*shift;
 	
 	//normalize length along this direction
 	//in the absolute units
 	vec4 dl = shift - Pos;
 	float lenfactor=pointSizeReal/length(dl);
 	dl=dl*lenfactor;
 	
 	//and shift in the absolute units.
 	//this is where the boundary would be in real units
 	dl=Pos+dl;
 	
 	//let's project it back to screen
 	dl=pvm * dl;
 	
 	//and do perspective calculations by hand
    vec2 projSize = screenSize * dl.xy / dl.w;
    vec2 projSizeZero = screenSize * gl_Position.xy / gl_Position.w;
    //now it is projected spot size
    vec2 diff = projSize.xy - projSizeZero.xy;
          
    //normalize it by maximum drawing/render spot size
    //for the fragment shader    
    dScale = abs(diff.x)/pointSizeMaxRender;
    //just in case it is too big
    dScale = min(dScale,1.0);   
    //square it, since we will be using it squared later
    dScale = dScale*dScale;
  
}
